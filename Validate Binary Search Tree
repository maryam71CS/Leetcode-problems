/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     void inorder(TreeNode* root,vector<int>& myvec)
     {
         if(root==NULL)
             return ;
         
         if(root->left) 
           inorder(root->left,myvec);
           myvec.push_back(root->val);
         
         if(root->right)
             inorder(root->right,myvec);
         return ;
     }
    bool isValidBST(TreeNode* root) {
        vector<int> myvec;
        inorder(root,myvec);
        int n=myvec.size();
        if(n==0)
            return true;
        for(int i=1;i<n;i++)
        {
            if(myvec[i]<=myvec[i-1]) //value of left child (and left subtree) of root needs to be grather than the right child.
                return false;
        }
        return true;
    }
}; 
